services:
  - type: worker
    name: celery_worker
    region: frankfurt
    runtime: python
    buildCommand: "poetry install"
    startCommand: "./compose/production/start_celery_worker"
    autoDeploy: false
    envVars:
      - key: CELERY_BROKER_URL
        fromService:
          name: celery-redis
          type: redis
          property: connectionString

  - type: web
    name: celery_beat
    region: frankfurt
    runtime: python
    buildCommand: "poetry install"
    startCommand: "./compose/production/start_celery_beat"
    autoDeploy: false
    envVars:
      - key: CELERY_BROKER_URL
        fromService:
          name: celery-redis
          type: redis
          property: connectionString

  - type: web
    name: celery_flower
    region: frankfurt
    plan: free
    runtime: python
    buildCommand: "poetry install"
    startCommand: "./compose/production/start_celery_flower"
    autoDeploy: false
    envVars:
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: celery-redis
          property: connectionString

  - type: redis
    name: celery-redis
    region: frankfurt
    plan: free # we choose a plan with persistence to ensure tasks are not lost upon restart
    # maxmemoryPolicy: noeviction # recommended policy for queues
    ipAllowList: [] # only allow internal connections
